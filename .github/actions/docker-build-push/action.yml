name: "Build, Push, and Deploy Docker Image to ECR"
description: "Composite action to build, push a Docker image to AWS ECR and deploy to EC2"

inputs:
  aws-region:
    description: "AWS region where ECR repository exists"
    required: true
  aws-access-key-id:
    description: "AWS Access Key ID"
    required: true
  aws-secret-access-key:
    description: "AWS Secret Access Key"
    required: true
  aws-session-token:
    description: "AWS Session token"
    required: true
  ecr-repo:
    description: "Name of the ECR repository"
    required: true
  image-tag:
    description: "Tag for the Docker image"
    required: true
  dockerfile:
    description: "Path to the Dockerfile"
    default: "./Dockerfile"
  context:
    description: "Build context path"
    default: "."
  server-ip:
    description: "EC2 server IP"
    required: true
  ssh-user:
    description: "SSH username"
    required: true
  ssh-key:
    description: "Private SSH key"
    required: true

runs:
  using: "composite"
  steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws-region }}
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-session-token: ${{ inputs.aws-session-token }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, Tag, and Push Docker image
      run: |
        IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr-repo }}:${{ inputs.image-tag }}
        echo "Building image: $IMAGE_URI"
        docker build -t $IMAGE_URI -f ${{ inputs.dockerfile }} ${{ inputs.context }}
        docker push $IMAGE_URI
        echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT
      shell: bash

    - name: SSH into EC2 and Deploy Container
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ inputs.server-ip }}
        username: ${{ inputs.ssh-user }}
        key: ${{ inputs.ssh-key }}
        port: 22
        script: |
          echo "Deploying Docker container from ECR..."

          # Install AWS CLI if missing
          if ! command -v aws &> /dev/null; then
            sudo apt-get update -y
            sudo apt-get install -y awscli
          fi

          # Authenticate EC2 with ECR
          aws ecr get-login-password --region ${{ inputs.aws-region }} | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

          # Pull latest image
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr-repo }}:${{ inputs.image-tag }}
          echo "Pulling image: $IMAGE_URI"
          sudo docker pull $IMAGE_URI

          # Stop & remove old container if running
          if [ "$(sudo docker ps -aq -f name=my-app)" ]; then
            echo "Stopping old container..."
            sudo docker rm -f my-app
          fi

          # Run new container (map port 80 â†’ 8000 inside container)
          echo "Starting new container..."
          sudo docker run -d --name my-app -p 80:8000 $IMAGE_URI

          echo "Deployment finished!"

